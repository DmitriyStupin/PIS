Лекция 1: Парадигмы программирования и структура хорошего кода

1. Правильное использование конструкций ЯП.
2. Основные принципы объектно-ориентированного программирования (ООП).
3. Применение принципов SOLID в ООП.
4. Значение соглашений о кодировании.

Цели изучения предмета:
- Понимание принципов хорошего кода.
- Навыки написания качественного кода.
- Умение разрабатывать объектно-ориентированный код.
- Освоение навыков тестирования кода.
- Понимание процесса объектно-ориентированного проектирования.
- Навыки работы с git.

Основные тенденции ООП:
a. Увеличение уровня абстракции.
b. Выделение типовых конструкций.
c. Улучшение безопасности и расширяемости.

Ценности в ООП: инкапсуляция и абстракция.

Механизмы ООП:
- Пространства имен.
- Наследование: создание новых классов на базе существующих.
- Полиморфизм: способность программы выбирать различные реализации для операций с одним названием.

Полиморфизм = наследование + виртуальные функции.

Лекция 2: Инструменты и системы контроля версий

Мотивация использования систем контроля версий в разработке ПО включает следующие проблемы:

- Наличие нескольких версий одного и того же кода.
- Работа нескольких программистов над одним и тем же кодом одновременно.
- Управление изменениями, включая объединение работ нескольких программистов или разных версий кода.
- Структурирование кода по времени для отслеживания изменений, предпочтительно в графическом виде.

История систем контроля версий 

В прошлом все эти процессы могли быть выполнены вручную: хранение версий в разных каталогах, передача кода друг другу в архивах, создание резервных копий на сервере, а также применение штрафов за нарушение стандартов кодирования.

Распределенные и централизованные системы контроля версий 

Распределенные системы позволяют более эффективно масштабировать процесс разработки.
